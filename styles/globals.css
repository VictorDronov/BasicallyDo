/* ./styles/globals.css */
@tailwind base;
@tailwind components;
@tailwind utilities;

h1 {
  @apply text-4xl;
}
h2 {
  @apply text-3xl;
}
h3 {
  @apply text-xl;
}
h4 {
  @apply text-lg;
}
h5 {
  @apply text-base;
}

p {
  @apply text-sm;
}

.label-preset {
  @apply flex flex-row justify-between leading-7 text-left text-white p-3 mt-5 border-2 border-brand-primary border-solid rounded-md bg-brand-secondary;
}

input {
  @apply placeholder-gray-500 border-none outline-none bg-brand-secondary text-brand-text w-full;
}

button {
  @apply pl-4 pr-4 align-middle border-2 border-gray-700 border-solid rounded-md;
}

.button {
  @apply pl-4 pr-4 align-middle border-2 border-gray-700 border-solid rounded-md cursor-pointer;
}

.container {
  @apply m-auto max-w-7xl px-9;
}

.task-wrapper {
  @apply flex flex-col justify-center flex-wrap;
}

.show {
  @apply absolute top-0 right-0;
}

.hide {
  @apply hidden;
}

/* //CUSTOM COUNTDOWN */

.base-timer__circle {
  fill: none;
  stroke: none;
}

.base-timer__path-elapsed {
  stroke-width: 7px;
  stroke: grey;
}

.base-timer__path-remaining {
  /* Just as thick as the original ring */
  stroke-width: 7px;

  /* Rounds the line endings to create a seamless circle */
  stroke-linecap: round;

  /* Makes sure the animation starts at the top of the circle */
  transform: rotate(90deg);
  transform-origin: center;

  /* One second aligns with the speed of the countdown timer */
  transition: 1s linear all;

  /* Allows the ring to change color when the color value updates */
  stroke: currentColor;
}

.base-timer__svg {
  /* Flips the svg and makes the animation to move left-to-right */
  transform: scaleX(-1);
}
